/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface CardDeckInterface extends utils.Interface {
  functions: {
    "deal(uint256)": FunctionFragment;
    "remaining()": FunctionFragment;
    "remainingIndices(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "deal" | "remaining" | "remainingIndices"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "remaining", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remainingIndices",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "deal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remaining", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingIndices",
    data: BytesLike
  ): Result;

  events: {
    "Card(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Card"): EventFragment;
}

export interface CardEventObject {
  cardIndex: number;
}
export type CardEvent = TypedEvent<[number], CardEventObject>;

export type CardEventFilter = TypedEventFilter<CardEvent>;

export interface CardDeck extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CardDeckInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deal(
      randomNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remaining(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    remainingIndices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  deal(
    randomNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remaining(overrides?: CallOverrides): Promise<BigNumber>;

  remainingIndices(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    deal(
      randomNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    remaining(overrides?: CallOverrides): Promise<BigNumber>;

    remainingIndices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    "Card(uint8)"(cardIndex?: null): CardEventFilter;
    Card(cardIndex?: null): CardEventFilter;
  };

  estimateGas: {
    deal(
      randomNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remaining(overrides?: CallOverrides): Promise<BigNumber>;

    remainingIndices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deal(
      randomNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remaining(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remainingIndices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
